using Plots;

include("kernel_functions.jl")
include("kernels.jl")
include("mean_functions.jl")
include("objective_functions.jl")
include("sampling.jl")
include("gaussian_process.jl")

function main()
    BUDGET = 200
    x = range(-10, 10, length = 100)
    y = range(-10, 10, length = 100)
    X = repeat(x, inner = length(y))
    Y = repeat(y, outer = length(x))
    opt, f = cross_in_tray(X, Y)
    display(plot(x, y, f, st=:surface))
    XY = hcat(X,Y) # Creates a mesh
    num_init_samples = 10 # Initial samples
    œÉ = 1e-6 # Noise variable
    ùíü = rand_sample(XY, num_init_samples, f, œÉ)
    Œ∏ = (3.0, 1.5) # Hyperparameters in the form of (œÉ, ‚Ñì) or (œÉ, ‚Ñì, p)
    Œ∫, Œ∏ = squared_exponential(Œ∏)
    rbf = RadialBasisFunction(Œ∫, Œ∏)
    min = 0;
    for i in 1 : size(XY)[1]
        if f(XY[i, 1], XY[i, 2]) < min
            min = f(XY[i, 1], XY[i, 2])
        end
    end
    println(min)
    # We will use the value of 1e-6 for jitter in our covariance matrix calculations
    Œö_ss = eval_KXX(rbf, XY, 1e-6)
    Œö_xx = eval_kxx(rbf, ùíü[:, 1:2], BUDGET, 1e-6)
    Œö_xs = eval_KxX(rbf, ùíü[:, 1:2], XY, BUDGET)

    Œº_pri = mean_zero()

    GP = GaussianProcess(Œº_pri, Œ∫, Œö_ss, Œö_xx, Œö_xs)
    
    for i in num_init_samples : BUDGET
        # Œº_post, std = predict_f(GP, ùíü, XY, num_init_samples)
        exp_imp, Œº_post = expected_improvement(GP, ùíü, XY)
        # println(size(exp_imp), " ", size(Œº_post))
        ùíü = best_sampling_point(exp_imp, XY, ùíü, f, œÉ)
        if i != BUDGET
            GP.Œö_xx = update_KXX(rbf, GP.Œö_xx, i, ùíü[:, 1:2], 1e-6)
            GP.Œö_xs = update_kxX(rbf, GP.Œö_xs, i, ùíü[:, 1:2], XY)
        end
        # Z = reshape(Œº_post, length(x), length(y))
        Z = reshape(Œº_post, length(x), length(y))
        display(plot(x, y, Z, st =:surface))
        
    end
    println(minimum(ùíü[:, 3]))
end

main()